generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model user {
  id                  String   @id @default(cuid())
  username            String?
  phone               String   @unique
  email               String?  @unique
  photo               String?
  role                Role     @default(USER) // Only one admin will have ADMIN
  balance             Int  @default(0)
  walletAddress       String?
  isBlocked           Boolean  @default(false)
  isAdmin             Boolean  @default(false)
  invitationCode      String
  myCode              String   @unique
  remarks             String?
  todayTask           Int      @default(0)
  totalTask           Int      @default(0)
  leftTask            Int      @default(0)
  password            String
  socket              String?
  transactionPassword String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  rechargeRecords   rechargeRecord[]
  withdrewalRecords withdrewalRecord[]
  withdrewalAccount withdrewalAccount[]

  // profit     profit[]
  profitCard profitCard[]
  messages   message[]
  contact    contact[]
  chatsFrom  chat[]       @relation("FromUser")
  chatsTo    chat[]       @relation("ToUser")
}

model campanyAccount {
  id      String @id @default(cuid())
  name    String
  account String
}

model rechargeRecord {
  id        String   @id @default(cuid())
  amount    Decimal
  photo     String   @db.LongText
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())

  user   user   @relation(fields: [userId], references: [id])
  userId String
}

model withdrewalRecord {
  id        String   @id @default(cuid())
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  amount    Decimal
  createdAt DateTime @default(now())
  status    Status   @default(PENDING)

  // user   user   @relation(fields: [userId], references: [id])
  // userId String
}

model withdrewalAccount {
  id      String @id @default(cuid())
  name    String
  account String
  user    user   @relation(fields: [userId], references: [id])
  userId  String
}

model product {
  id          String   @id @default(cuid())
  name        String
  price       Decimal
  stock       Int      @default(0)
  orderNumber Int      @unique
  createdAt   DateTime @default(now())
}

model post {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
}

model message {
  id        String   @id @default(cuid())
  content   String
  userId    String?
  isRead    Boolean  @default(false)
  user      user?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model profitCard {
  id              String   @id @default(cuid())
  orderNumber     Int
  profit          Int
  priceDifference Int
  status          Status   @default(PENDING)
  createdAt       DateTime @default(now())
  userId          String
  user            user     @relation(fields: [userId], references: [id])

  @@unique([orderNumber, userId])
}

model contact {
  id          String   @id @default(cuid())
  username    String
  phone       Int
  status      Status   @default(PENDING)
  userId      String
  user        user     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
}

model chat {
  id         String   @id @default(cuid())
  from       user     @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  to         user     @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String
  msg        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
